Python 3.12.6 (tags/v3.12.6:a4a2d2b, Sep  6 2024, 20:11:23) [MSC v.1940 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> print(int(0x10101 and 0x100101))
1048833
>>> print(int(0x10101 & 0x100101))
257
>>> print(int(0x10101 , 0x100101))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: int() base must be >= 2 and <= 36, or 0
>>> print(int(0x10101),int(  0x100101))
65793 1048833
>>> print(int(0x10101 or 0x100101))
65793
>>> print(int(0x10101 not 0x100101))
  File "<stdin>", line 1
    print(int(0x10101 not 0x100101))
              ^^^^^^^^^^^^^^^^^^^^
SyntaxError: invalid syntax. Perhaps you forgot a comma?
>>> print(int( not 0x100101))
0
>>> print(int( not 0x0))
1
>>> print(int( not 0x10))
0
>>> print(int( not 110))
0
>>> print(int( not 0))
1
>>> null
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'null' is not defined
>>> print(int(null))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'null' is not defined
>>> print(int(:null"))
  File "<stdin>", line 1
    print(int(:null"))
              ^
SyntaxError: invalid syntax
>>> print(int("null"))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: invalid literal for int() with base 10: 'null'
>>> print(int("null"))
KeyboardInterrupt
>>> print(int('a' &  'A'))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for &: 'str' and 'str'
>>> print(int('a' &  'A'))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for &: 'str' and 'str'
>>> print(int('a' and 'A'))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: invalid literal for int() with base 10: 'A'
>>> print(('a' and 'A'))
A
>>> print(('a' or 'A'))
a
>>> print((not 'A'))
False
>>> print((not not 'A'))
True
>>> print((not not ))
  File "<stdin>", line 1
    print((not not ))
                   ^
SyntaxError: invalid syntax
>>> print((not not "" ))
False
>>> print(('a' and "a" ))
a
>>> print(('a' and "a" )) print(type('a' and "a"))
  File "<stdin>", line 1
    print(('a' and "a" )) print(type('a' and "a"))
                          ^^^^^
SyntaxError: invalid syntax
>>> print(('a' and "a" )) print(typeof('a' and "a"))
  File "<stdin>", line 1
    print(('a' and "a" )) print(typeof('a' and "a"))
                          ^^^^^
SyntaxError: invalid syntax
>>> print(int('a' and "a" ))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: invalid literal for int() with base 10: 'a'
>>> print(int(int.'a' and int."a" ))
  File "<stdin>", line 1
    print(int(int.'a' and int."a" ))
                  ^^^
SyntaxError: invalid syntax
>>> print((int.'a' and int."a" ))
  File "<stdin>", line 1
    print((int.'a' and int."a" ))
               ^^^
SyntaxError: invalid syntax
>>> print(int('a') and int("a") ))
  File "<stdin>", line 1
    print(int('a') and int("a") ))
                                 ^
SyntaxError: unmatched ')'
>>> print(int('a') and int("a") )
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: invalid literal for int() with base 10: 'a'
>>> print(int('a') ,int("a"))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: invalid literal for int() with base 10: 'a'
>>> print(ocr('a') ,int("a"))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'ocr' is not defined. Did you mean: 'oct'?
>>> print(otd('a') ,int("a"))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'otd' is not defined. Did you mean: 'ord'?
>>> print(ord('a') ,int("a"))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: invalid literal for int() with base 10: 'a'
>>> print(ord('a') ,ord("a"))
97 97
>>> (print(('a' and "a" )) and  print(typeof('a' and "a")))
a
>>>   print(typeof('a' and "a"))
  File "<stdin>", line 1
    print(typeof('a' and "a"))
IndentationError: unexpected indent
>>> print(typeof('a' and "a"))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'typeof' is not defined. Did you mean: 'type'?
>>> print(type('a' and "a"))
<class 'str'>
>>> (print(('a' and "a" )) and print(type('a' and "a")))
a
>>> ( and print(type('a' and "a")))
  File "<stdin>", line 1
    ( and print(type('a' and "a")))
      ^^^
SyntaxError: invalid syntax
>>> ( print(type('a' and "a")))
<class 'str'>
>>>  ( print(type('a' and "a")))
  File "<stdin>", line 1
    ( print(type('a' and "a")))
IndentationError: unexpected indent
>>> (print(('a' and "a" )) and print(type('b' and "a")))
a
>>> (print(('a' and "a" )) and print(type('b' and "b")))
a
>>> (print(('a' and "a" ))  print(type('b' and "b")))
  File "<stdin>", line 1
    (print(('a' and "a" ))  print(type('b' and "b")))
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
SyntaxError: invalid syntax. Perhaps you forgot a comma?
>>> (print(('a' and "a" ))  print(type('b' and "b")))
  File "<stdin>", line 1
    (print(('a' and "a" ))  print(type('b' and "b")))
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
SyntaxError: invalid syntax. Perhaps you forgot a comma?
>>>
>>>
>>>
>>>
>>> `
  File "<stdin>", line 1
    `
    ^
SyntaxError: invalid syntax
>>> `
  File "<stdin>", line 1
    `
    ^
SyntaxError: invalid syntax
>>>
>>> `
  File "<stdin>", line 1
    `
    ^
SyntaxError: invalid syntax
>>> '
  File "<stdin>", line 1
    '
    ^
SyntaxError: unterminated string literal (detected at line 1)
>>> /
  File "<stdin>", line 1
    /
    ^
SyntaxError: invalid syntax
>>> (print(('a' and "a" ))  print(type('b' and "b")))
  File "<stdin>", line 1
    (print(('a' and "a" ))  print(type('b' and "b")))
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
SyntaxError: invalid syntax. Perhaps you forgot a comma?
>>> (print(('a' and "a" ))  print(type('b' and "b")))`
  File "<stdin>", line 1
    (print(('a' and "a" ))  print(type('b' and "b")))`
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
SyntaxError: invalid syntax. Perhaps you forgot a comma?
>>> (print(('a' and "a" ))  print(type('b' and "b")))`"
  File "<stdin>", line 1
    (print(('a' and "a" ))  print(type('b' and "b")))`"
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
SyntaxError: invalid syntax. Perhaps you forgot a comma?
>>> (print(('a' and "a" ))  print(type('b' and "b")))`"
  File "<stdin>", line 1
    (print(('a' and "a" ))  print(type('b' and "b")))`"
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
SyntaxError: invalid syntax. Perhaps you forgot a comma?
>>>
>>>
>>> P=10
>>> id(P)
140733420669656
>>> P+=10
>>> id(P)
140733420669976
>>> id(10)
140733420669656
>>> id(P=10)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: id() takes no keyword arguments
>>> P=10
>>> id(P)
140733420669656
>>> p=[12,76,78,68,57,68]
>>> id(p)
1432722149952
>>> id(p)
KeyboardInterrupt
>>> p[1]=12112
>>> id(p)
1432722149952
>>> p='435rutiuyeff'
>>> p[12]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: string index out of range
>>> print(p[12])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: string index out of range
>>> print(p[10])
f
>>> p[10]=13
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'str' object does not support item assignment
>>> p[10]='13'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>